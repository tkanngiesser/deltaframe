# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['get_added_entries', 'get_removed_entries', 'get_modified_entries', 'logging']

# Cell
import pandas as pd
import numpy as np

# Cell
def get_added_entries(df_old, df_new, unique_id, trans_col="transaction", trans_vaL="added"):
    """get entries in df2 which are not in df1"""
    cols = list(df_old.columns)
    new_entries = (pd
                .merge(df_old, df_new, how="outer", on=unique_id, indicator=True, suffixes=("_foo",""))
                .query('_merge == "right_only"')
                )
    new_entries = new_entries[cols]
    new_entries[trans_col] = trans_vaL
    return new_entries

# Cell
def get_removed_entries(df_old, df_new, unique_id, trans_col="transaction", trans_val="removed"):
    """Returns the removed entries that are not any longer in df_new"""
    cols = list(df_old.columns)
    removed_entries = (pd
                .merge(df_new, df_old, how="outer", on=unique_id, indicator=True, suffixes=("_foo",""))
                .query('_merge == "right_only"')
                )
    removed_entries = removed_entries[cols]
    removed_entries[trans_col] = trans_val
    return removed_entries

# Cell
def get_modified_entries(df_old, df_new, unique_id, added_entries=None, trans_col="transaction", trans_val="modified"):
    """Returns the modified entries"""
    cols = list(df_new.columns)
    if added_entries is not None:
        df_new = df_new[~df_new.isin(list(added_entries[unique_id].values))].dropna()
    modified_entries = df_old.merge(df_new, indicator=True, how='outer')
    modified_entries = modified_entries[modified_entries['_merge'] == 'right_only']
    modified_entries = modified_entries[cols]
    modified_entries[trans_col] = trans_val
    return modified_entries

# Cell
def logging(df_log, df_old, df_new, unique_id, trans_col="transaction", trans_val_added="added", trans_val_removed="removed", trans_val_modified="modified", sort_by=None):
    if df_log is None:
        df_log = df_old.copy()
        df_log[trans_col] = trans_val_added
    else:
        subset = list(df_log.columns)
        subset.remove(trans_col)
        added_entries = get_added_entries(df_old=df_old, df_new=df_new, unique_id=unique_id, trans_col=trans_col, trans_vaL=trans_val_added)
        removed_entries = get_removed_entries(df_old=df_old, df_new=df_new, unique_id=unique_id, trans_col=trans_col, trans_val=trans_val_removed)
        modified_entries = get_modified_entries(df_new=df_new, df_old=df_old, unique_id=unique_id, added_entries=added_entries, trans_col=trans_col, trans_val=trans_val_modified)
        df_log = df_log.append(modified_entries, ignore_index=True)
        df_log = df_log.drop_duplicates(subset=subset, keep="first")
        df_log = df_log.append(added_entries, ignore_index=True)
        df_log = df_log.append(removed_entries, ignore_index=True)
    if sort_by:
        df_log = df_log.sort_values(by=sort_by)
    return df_log